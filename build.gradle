buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
		maven {
			name = 'sponge'
			url = 'https://repo.spongepowered.org/repository/maven-public/'
		}
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'forge'

// These settings allow you to choose what version of Java you want to be compatible with. Forge 1.7.10 runs on Java 6 to 8.
sourceCompatibility = 1.8
targetCompatibility = 1.8

version = project.version
group = project.group

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}

repositories {
	jcenter()
	maven {
		name = 'sponge'
		url = 'https://repo.spongepowered.org/maven'
	}
}

configurations {
    embed
    compile.extendsFrom(embed)
	
	shade
    compile.extendsFrom(shade)
}

dependencies {
	implementation ('org.spongepowered:mixin:0.8')
	
	annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

ext.outRefMapFile = "${tasks.compileJava.temporaryDir}/${project.group}.mixin.refmap.json"

jar {
	from(sourceSets.main.output);

    // embed libraries in jar
    from configurations.embed.collect {
        exclude '**/LICENSE', '**/LICENSE.txt'
        it.isDirectory() ? it : zipTree(it)
    }
	
	configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude '**/LICENSE', '**/LICENSE.txt', 'META-INF', 'META-INF/**'
        }
    }
	

	manifest {
        attributes (
			'MixinConfigs': "${project.group}.mixin.json",
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
			
			// If these two are not set, Forge will not detect the mod, it will only run the mixins
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true',
		)
	}
	
	from outRefMapFile;
}

def outSrgFile = "${tasks.compileJava.temporaryDir}/outSrg.srg"

afterEvaluate {
    tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${outSrgFile}", "-AoutRefMapFile=${outRefMapFile}"];
}

reobf {
    addExtraSrgFile outSrgFile
}




processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        // Replace version and mcversion.
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
}

// Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives sourcesJar
    archives devJar
}

// This block configures any maven publications you want to make.
publishing {
    publications {
        mavenJava(MavenPublication) {
        // Add any other artifacts here that you would like to publish!
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
        }
    }

    // This block selects the repositories you want to publish to.
    repositories {
        // Add the repositories you want to publish to here.
    }
}
